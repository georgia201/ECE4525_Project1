library IEEE; 
use IEEE.std_logic_1164.all;

entity serialadder is
  port(A, B: in std_logic_vector (7 downto 0); 
       Cin, reset, clk : in std_logic;    --inputs
       Cout : out std_logic;
       Sum : out std_logic_vector (7 downto 0));   --outputs
end serialadder;

architecture behavioral of serialadder is
    signal temp_c, temp_c2, temp_c3 : std_logic;
    signal temp_c_reset_done : boolean := false;
    signal B2C, one : std_logic_vector(7 downto 0);
begin	
  process(clk, temp_c_reset_done)
  begin
      if not temp_c_reset_done then
              temp_c <= '0';
              temp_c2 <= '0';
              temp_c3 <= '0';
              one <= "00000001";
              temp_c_reset_done <= true;
      for i in 0 to 7 loop
        B2C(i) <= not B(i);
      end loop;
      for i in 0 to 7 loop
        B2C(i) <= B2C(i) xor one(i) xor temp_c3;
        temp_c3 <= (B2C(i) and one(i)) or (B2C(i) and temp_c3) or (one(i) and temp_c3);
      end loop;
      elsif rising_edge(clk) then
        for i in 0 to 7 loop
          Sum(i)  <= A(i) xor B2C(i) xor temp_c;
          temp_c2 <= temp_c;          
          temp_c <= (A(i) and B2C(i)) or (A(i) and temp_c) or (B2C(i) and temp_c);
        end loop;
      end if;
  end process;
end behavioral;
